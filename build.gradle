buildscript {
    project.ext.CERN_VM = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: false
    project.ext.TRAVIS_CI = System.getProperty('TRAVIS') ?: System.getenv('TRAVIS') ?: false
    project.ext.DEPLOYMENT = System.getProperty('deployment') ?: false
    project.ext.VCS_TAG = System.getProperty('TRAVIS_TAG') ?: System.getenv('TRAVIS_TAG')
    project.ext.POM = [
            groupId    : 'org.streamingpool',
            artifactId : 'streamingpool-ext-analysis',
            description: 'This project is an analysis pakage for streamingpool.',
            developers : [[
                                  id   : 'streamingpool-dev',
                                  name : 'Streamingpool Developers',
                                  email: 'streamingpool-dev@cern.ch'
                          ]]
    ]
    project.ext.INFO = [
            repo        : 'https://github.com/streamingpool/streamingpool-ext-analysis.git',
            url         : 'http://www.streamingpool.org/',
            github      : 'https://github.com/streamingpool/streamingpool-ext-analysis',
            githubIssues: 'https://github.com/streamingpool/streamingpool-ext-analysis/issues'
    ]
    project.ext.BINTRAY = [
            repo        : 'streamingpool-repos',
            name        : 'org.streamingpool:streamingpool-ext-analysis',
            organization: 'streamingpool',
            userName    : 'streamingpool-dev',
            apiToken    : System.getenv('BINTRAY_API_TOKEN')
    ]
    repositories {
        if (CERN_VM) {
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
        } else {
            mavenCentral()
            jcenter()
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'nebula.maven-publish'
apply plugin: 'com.jfrog.bintray'

repositories {
    if (CERN_VM) {
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
        jcenter()
    }
}

if (DEPLOYMENT) {
    println 'Applying deployment scripts'
    apply from: './scripts/bintray-deploy.gradle'
}

group 'org.streamingpool'

sourceCompatibility = 1.8

dependencies {
    compile 'org.streamingpool:streamingpool-core:1.+'
    compile 'org.streamingpool:streamingpool-ext-tensorics:1.+'

    compile 'org.springframework:spring-core:4.3.9.RELEASE'
    compile 'org.springframework:spring-context:4.3.9.RELEASE'
    compile 'org.springframework:spring-test:4.3.9.RELEASE' // Testing utils in /src/java for the moment

    compile 'org.slf4j:slf4j-api:1.7.+'

    compile 'com.google.guava:guava:22.0'

    compile 'junit:junit:4.12' // Testing utils in /src/java for the moment
    testCompile 'org.mockito:mockito-core:2.8.+'
    testCompile 'org.assertj:assertj-core:3.8.+'
    testCompile 'pl.pragmatists:JUnitParams:1.1.0'
    testCompile 'com.openpojo:openpojo:0.8.6'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
    test {
        java {
            srcDir 'src/test'
        }
    }
}

javadoc { options.encoding = "UTF-8" }

task wrapper(type: Wrapper) { gradleVersion = '4.0' }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives javadocJar, sourcesJar }

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}
